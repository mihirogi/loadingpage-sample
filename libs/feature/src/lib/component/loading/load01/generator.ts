import * as mojs from '@mojs/core';

class StringFreeTime extends mojs.CustomShape {
    getShape() {
        return '<path d="M0.90675 1.232H15.1788V3.408H4.01075V10.192H14.1228V12.368H4.01075V22H0.90675V1.232ZM18.621 6.512H21.341V9.04C21.341 8.54933 21.5543 8.09067 21.981 7.664C22.4077 7.216 22.9517 6.864 23.613 6.608C24.2743 6.33067 24.925 6.192 25.565 6.192H26.973V8.656H25.373C24.0077 8.656 23.0157 8.83733 22.397 9.2C21.7997 9.54133 21.501 10.1707 21.501 11.088V22H18.621V6.512ZM36.3678 22.32C31.6318 22.32 29.2638 20.7413 29.2638 17.584V11.472C29.2638 9.59467 29.7971 8.25067 30.8638 7.44C31.9518 6.608 33.7011 6.192 36.1118 6.192C38.3944 6.192 40.0371 6.58667 41.0398 7.376C42.0638 8.16533 42.5758 9.53067 42.5758 11.472V14.896H32.1758V17.232C32.1758 18.2987 32.5491 19.0667 33.2958 19.536C34.0424 20.0053 35.1944 20.24 36.7517 20.24C38.2238 20.24 39.9624 19.984 41.9678 19.472V21.68C40.0051 22.1067 38.1384 22.32 36.3678 22.32ZM39.6958 13.008V10.576C39.6958 9.63733 39.4078 8.99733 38.8318 8.656C38.2771 8.29333 37.3171 8.112 35.9518 8.112C34.6291 8.112 33.6691 8.29333 33.0718 8.656C32.4744 8.99733 32.1758 9.63733 32.1758 10.576V13.008H39.6958ZM53.4928 22.32C48.7568 22.32 46.3888 20.7413 46.3888 17.584V11.472C46.3888 9.59467 46.9221 8.25067 47.9888 7.44C49.0768 6.608 50.8261 6.192 53.2368 6.192C55.5194 6.192 57.1621 6.58667 58.1648 7.376C59.1888 8.16533 59.7008 9.53067 59.7008 11.472V14.896H49.3008V17.232C49.3008 18.2987 49.6741 19.0667 50.4208 19.536C51.1674 20.0053 52.3194 20.24 53.8767 20.24C55.3488 20.24 57.0874 19.984 59.0928 19.472V21.68C57.1301 22.1067 55.2634 22.32 53.4928 22.32ZM56.8208 13.008V10.576C56.8208 9.63733 56.5328 8.99733 55.9568 8.656C55.4021 8.29333 54.4421 8.112 53.0768 8.112C51.7541 8.112 50.7941 8.29333 50.1968 8.656C49.5994 8.99733 49.3008 9.63733 49.3008 10.576V13.008H56.8208ZM69.4018 3.408H62.3618V1.232H79.5458V3.408H72.5378V22H69.4018V3.408ZM82.8085 0.911999H85.6885V3.92H82.8085V0.911999ZM82.8085 6.512H85.6885V22H82.8085V6.512ZM90.6835 6.512H93.5635V8.4C93.8622 6.928 95.6008 6.192 98.7795 6.192C101.361 6.192 102.972 6.896 103.612 8.304C103.804 7.62133 104.38 7.09867 105.34 6.736C106.321 6.37333 107.516 6.192 108.924 6.192C110.844 6.192 112.198 6.55467 112.988 7.28C113.777 7.984 114.172 9.104 114.172 10.64V22H111.292V10.832C111.292 10.4267 111.26 10.096 111.196 9.84C111.132 9.584 111.004 9.328 110.812 9.072C110.385 8.53867 109.436 8.272 107.964 8.272C106.833 8.272 105.99 8.34667 105.436 8.496C104.881 8.64533 104.497 8.90133 104.284 9.264C104.092 9.62667 103.996 10.1493 103.996 10.832V22H101.116V10.832C101.116 10.4267 101.084 10.096 101.02 9.84C100.956 9.584 100.828 9.328 100.636 9.072C100.209 8.53867 99.2702 8.272 97.8195 8.272C96.6462 8.272 95.7608 8.34667 95.1635 8.496C94.5662 8.64533 94.1502 8.90133 93.9155 9.264C93.6808 9.60533 93.5635 10.128 93.5635 10.832V22H90.6835V6.512ZM125.68 22.32C120.944 22.32 118.576 20.7413 118.576 17.584V11.472C118.576 9.59467 119.11 8.25067 120.176 7.44C121.264 6.608 123.014 6.192 125.424 6.192C127.707 6.192 129.35 6.58667 130.352 7.376C131.376 8.16533 131.888 9.53067 131.888 11.472V14.896H121.488V17.232C121.488 18.2987 121.862 19.0667 122.608 19.536C123.355 20.0053 124.507 20.24 126.064 20.24C127.536 20.24 129.275 19.984 131.28 19.472V21.68C129.318 22.1067 127.451 22.32 125.68 22.32ZM129.008 13.008V10.576C129.008 9.63733 128.72 8.99733 128.144 8.656C127.59 8.29333 126.63 8.112 125.264 8.112C123.942 8.112 122.982 8.29333 122.384 8.656C121.787 8.99733 121.488 9.63733 121.488 10.576V13.008H129.008Z"/>'
    }

    getLength() {
        return 678.6541748046875;
    }
}

class StringMotivation extends mojs.CustomShape {
    getShape() {
        return '<path d="M0.78175 1.232H5.42175L12.0778 18.512L12.1738 18.544L18.4778 1.232H22.9578V22H20.2378V4.432H20.0778L13.3898 22H10.6058L3.72575 4.432H3.56575V22H0.78175V1.232ZM34.7123 22.32C33.3469 22.32 32.3229 22.2667 31.6403 22.16C30.9576 22.0747 30.2749 21.872 29.5923 21.552C28.8883 21.232 28.3763 20.72 28.0563 20.016C27.7363 19.2907 27.5763 18.32 27.5763 17.104V11.728C27.5763 10.768 27.6936 9.92533 27.9283 9.2C28.1629 8.47467 28.4723 7.90933 28.8563 7.504C29.1763 7.14133 29.6563 6.864 30.2963 6.672C30.9576 6.45867 31.6296 6.32 32.3123 6.256C33.0803 6.21333 33.8803 6.192 34.7123 6.192C35.8216 6.192 36.6536 6.224 37.2083 6.288C37.7843 6.33067 38.3923 6.43733 39.0323 6.608C39.6936 6.8 40.2056 7.088 40.5683 7.472C40.9309 7.856 41.2403 8.41067 41.4963 9.136C41.7309 9.88267 41.8483 10.7467 41.8483 11.728V17.104C41.8483 18.9173 41.4323 20.24 40.6003 21.072C40.2589 21.4133 39.7683 21.68 39.1283 21.872C38.4883 22.064 37.8269 22.192 37.1443 22.256C36.3336 22.2987 35.5229 22.32 34.7123 22.32ZM34.7123 20.432C35.6083 20.432 36.2589 20.4107 36.6643 20.368C37.0696 20.3253 37.4643 20.208 37.8483 20.016C38.2323 19.8453 38.4989 19.568 38.6483 19.184C38.8189 18.7787 38.9043 18.224 38.9043 17.52V11.248C38.9043 10.288 38.7869 9.59467 38.5523 9.168C38.3176 8.72 37.9123 8.432 37.3363 8.304C36.7816 8.15467 35.9069 8.08 34.7123 8.08C33.5176 8.08 32.6323 8.15467 32.0563 8.304C31.5016 8.432 31.1069 8.72 30.8723 9.168C30.6376 9.59467 30.5203 10.288 30.5203 11.248V17.52C30.5203 18.224 30.5949 18.7787 30.7443 19.184C30.9149 19.568 31.1923 19.8453 31.5763 20.016C31.9603 20.208 32.3549 20.3253 32.7603 20.368C33.1656 20.4107 33.8163 20.432 34.7123 20.432ZM52.8358 22.32C51.5131 22.32 50.4784 22.1813 49.7318 21.904C48.9851 21.6053 48.4411 21.1147 48.0998 20.432C47.7798 19.728 47.6198 18.7467 47.6198 17.488V8.4H44.1638V6.512H47.6198V1.712H50.5318V6.512H56.0678V8.4H50.5318V17.648C50.5318 18.416 50.6171 18.992 50.7878 19.376C50.9798 19.76 51.2998 20.0373 51.7478 20.208C52.2171 20.3573 52.8891 20.432 53.7638 20.432C54.0411 20.432 54.8091 20.3467 56.0678 20.176V22.064C54.9798 22.2347 53.9024 22.32 52.8358 22.32ZM59.2148 0.911999H62.0948V3.92H59.2148V0.911999ZM59.2148 6.512H62.0948V22H59.2148V6.512ZM64.7858 6.512H67.8258L72.1138 19.504H72.2738L76.4338 6.512H79.2178L73.8098 22H70.3538L64.7858 6.512ZM86.6703 22.32C85.1983 22.32 84.0569 22.1813 83.2463 21.904C82.4569 21.6267 81.8809 21.136 81.5182 20.432C81.1769 19.728 81.0063 18.7147 81.0063 17.392C81.0063 16.2187 81.1663 15.312 81.4863 14.672C81.8276 14.0107 82.3929 13.5413 83.1823 13.264C83.9929 12.9867 85.1343 12.848 86.6063 12.848H91.2463V10.384C91.2463 9.808 91.1289 9.37067 90.8943 9.072C90.6809 8.752 90.3076 8.528 89.7743 8.4C89.2623 8.272 88.5049 8.208 87.5023 8.208C85.9023 8.208 84.1316 8.336 82.1903 8.592V6.48C84.3023 6.288 86.2116 6.192 87.9183 6.192C89.7103 6.192 91.0329 6.33067 91.8863 6.608C92.7396 6.864 93.3263 7.32267 93.6463 7.984C93.9663 8.64533 94.1263 9.66933 94.1263 11.056V22H91.3423V20.528C91.1076 21.7227 89.5503 22.32 86.6703 22.32ZM87.1503 20.432C88.1956 20.432 89.0809 20.3573 89.8063 20.208C90.7663 20.016 91.2463 19.568 91.2463 18.864V14.64H86.7983C85.8809 14.64 85.2196 14.7147 84.8143 14.864C84.4089 14.992 84.1423 15.248 84.0143 15.632C83.8863 16.016 83.8223 16.6347 83.8223 17.488C83.8223 18.256 83.8969 18.8533 84.0463 19.28C84.1956 19.6853 84.4623 19.984 84.8463 20.176C85.2303 20.3467 85.8063 20.432 86.5743 20.432H87.1503ZM105.617 22.32C104.294 22.32 103.26 22.1813 102.513 21.904C101.766 21.6053 101.222 21.1147 100.881 20.432C100.561 19.728 100.401 18.7467 100.401 17.488V8.4H96.945V6.512H100.401V1.712H103.313V6.512H108.849V8.4H103.313V17.648C103.313 18.416 103.398 18.992 103.569 19.376C103.761 19.76 104.081 20.0373 104.529 20.208C104.998 20.3573 105.67 20.432 106.545 20.432C106.822 20.432 107.59 20.3467 108.849 20.176V22.064C107.761 22.2347 106.684 22.32 105.617 22.32ZM111.996 0.911999H114.876V3.92H111.996V0.911999ZM111.996 6.512H114.876V22H111.996V6.512ZM126.431 22.32C125.066 22.32 124.042 22.2667 123.359 22.16C122.676 22.0747 121.994 21.872 121.311 21.552C120.607 21.232 120.095 20.72 119.775 20.016C119.455 19.2907 119.295 18.32 119.295 17.104V11.728C119.295 10.768 119.412 9.92533 119.647 9.2C119.882 8.47467 120.191 7.90933 120.575 7.504C120.895 7.14133 121.375 6.864 122.015 6.672C122.676 6.45867 123.348 6.32 124.031 6.256C124.799 6.21333 125.599 6.192 126.431 6.192C127.54 6.192 128.372 6.224 128.927 6.288C129.503 6.33067 130.111 6.43733 130.751 6.608C131.412 6.8 131.924 7.088 132.287 7.472C132.65 7.856 132.959 8.41067 133.215 9.136C133.45 9.88267 133.567 10.7467 133.567 11.728V17.104C133.567 18.9173 133.151 20.24 132.319 21.072C131.978 21.4133 131.487 21.68 130.847 21.872C130.207 22.064 129.546 22.192 128.863 22.256C128.052 22.2987 127.242 22.32 126.431 22.32ZM126.431 20.432C127.327 20.432 127.978 20.4107 128.383 20.368C128.788 20.3253 129.183 20.208 129.567 20.016C129.951 19.8453 130.218 19.568 130.367 19.184C130.538 18.7787 130.623 18.224 130.623 17.52V11.248C130.623 10.288 130.506 9.59467 130.271 9.168C130.036 8.72 129.631 8.432 129.055 8.304C128.5 8.15467 127.626 8.08 126.431 8.08C125.236 8.08 124.351 8.15467 123.775 8.304C123.22 8.432 122.826 8.72 122.591 9.168C122.356 9.59467 122.239 10.288 122.239 11.248V17.52C122.239 18.224 122.314 18.7787 122.463 19.184C122.634 19.568 122.911 19.8453 123.295 20.016C123.679 20.208 124.074 20.3253 124.479 20.368C124.884 20.4107 125.535 20.432 126.431 20.432ZM138.059 6.512H140.939V8.4C141.237 6.928 142.933 6.192 146.027 6.192C148.011 6.192 149.397 6.55467 150.187 7.28C150.997 7.984 151.403 9.104 151.403 10.64V22H148.523V10.8C148.523 10.3947 148.491 10.064 148.427 9.808C148.363 9.552 148.235 9.296 148.043 9.04C147.616 8.50667 146.667 8.24 145.195 8.24C144.064 8.24 143.189 8.32533 142.571 8.496C141.973 8.64533 141.547 8.90133 141.291 9.264C141.056 9.62667 140.939 10.1387 140.939 10.8V22H138.059V6.512Z"/>'
    }
    getLength() {
        return 844.5343627929688
    }
}

class StringStrength extends mojs.CustomShape {
    getShape() {
        return '<path d="M7.06263 23.32C5.29196 23.32 3.17996 23.1493 0.726625 22.808V20.216C3.20129 20.7493 5.37729 21.016 7.25463 21.016C8.83329 21.016 9.98529 20.8453 10.7106 20.504C11.436 20.1413 11.7986 19.48 11.7986 18.52V15.832C11.7986 14.936 11.5426 14.3067 11.0306 13.944C10.5186 13.5813 9.62263 13.4 8.34263 13.4H5.91063C3.88396 13.4 2.44396 12.9947 1.59063 12.184C0.737292 11.3733 0.310625 10.1147 0.310625 8.408V6.744C0.310625 5.61333 0.555958 4.696 1.04663 3.992C1.55863 3.288 2.40129 2.76533 3.57463 2.424C4.76929 2.08267 6.40129 1.912 8.47063 1.912C9.85729 1.912 11.6386 2.02933 13.8146 2.264V4.6C11.3826 4.23733 9.52663 4.056 8.24663 4.056C6.26263 4.056 4.95063 4.248 4.31063 4.632C3.64929 5.03733 3.31863 5.70933 3.31863 6.648V9.016C3.31863 9.74133 3.57463 10.2747 4.08663 10.616C4.61996 10.936 5.52663 11.096 6.80663 11.096H9.30263C10.732 11.096 11.8413 11.2667 12.6306 11.608C13.4413 11.9493 14.0066 12.472 14.3266 13.176C14.668 13.8587 14.8386 14.7867 14.8386 15.96V17.464C14.8386 18.936 14.5613 20.0987 14.0066 20.952C13.4733 21.8053 12.6413 22.4133 11.5106 22.776C10.38 23.1387 8.89729 23.32 7.06263 23.32ZM25.6014 23.32C24.2787 23.32 23.244 23.1813 22.4974 22.904C21.7507 22.6053 21.2067 22.1147 20.8654 21.432C20.5454 20.728 20.3854 19.7467 20.3854 18.488V9.4H16.9294V7.512H20.3854V2.712H23.2974V7.512H28.8334V9.4H23.2974V18.648C23.2974 19.416 23.3827 19.992 23.5534 20.376C23.7454 20.76 24.0654 21.0373 24.5134 21.208C24.9827 21.3573 25.6547 21.432 26.5294 21.432C26.8067 21.432 27.5747 21.3467 28.8334 21.176V23.064C27.7454 23.2347 26.668 23.32 25.6014 23.32ZM31.9804 7.512H34.7004V10.04C34.7004 9.54933 34.9137 9.09067 35.3404 8.664C35.767 8.216 36.311 7.864 36.9724 7.608C37.6337 7.33067 38.2844 7.192 38.9244 7.192H40.3324V9.656H38.7324C37.367 9.656 36.375 9.83733 35.7564 10.2C35.159 10.5413 34.8604 11.1707 34.8604 12.088V23H31.9804V7.512ZM49.7271 23.32C44.9911 23.32 42.6231 21.7413 42.6231 18.584V12.472C42.6231 10.5947 43.1565 9.25067 44.2231 8.44C45.3111 7.608 47.0605 7.192 49.4711 7.192C51.7538 7.192 53.3965 7.58667 54.3991 8.376C55.4231 9.16533 55.9351 10.5307 55.9351 12.472V15.896H45.5351V18.232C45.5351 19.2987 45.9085 20.0667 46.6551 20.536C47.4018 21.0053 48.5538 21.24 50.1111 21.24C51.5831 21.24 53.3218 20.984 55.3271 20.472V22.68C53.3645 23.1067 51.4978 23.32 49.7271 23.32ZM53.0551 14.008V11.576C53.0551 10.6373 52.7671 9.99733 52.1911 9.656C51.6365 9.29333 50.6765 9.112 49.3111 9.112C47.9885 9.112 47.0285 9.29333 46.4311 9.656C45.8338 9.99733 45.5351 10.6373 45.5351 11.576V14.008H53.0551ZM60.3241 7.512H63.2041V9.4C63.5028 7.928 65.1988 7.192 68.2921 7.192C70.2761 7.192 71.6628 7.55467 72.4521 8.28C73.2628 8.984 73.6681 10.104 73.6681 11.64V23H70.7881V11.8C70.7881 11.3947 70.7561 11.064 70.6921 10.808C70.6281 10.552 70.5001 10.296 70.3081 10.04C69.8815 9.50667 68.9321 9.24 67.4601 9.24C66.3295 9.24 65.4548 9.32533 64.8361 9.496C64.2388 9.64533 63.8121 9.90133 63.5561 10.264C63.3215 10.6267 63.2041 11.1387 63.2041 11.8V23H60.3241V7.512ZM84.5239 30.04C82.4119 30.04 80.6305 29.9227 79.1799 29.688V27.64C81.7399 27.9387 83.6065 28.088 84.7799 28.088C86.2519 28.088 87.3185 27.8533 87.9799 27.384C88.6625 26.9147 89.0039 26.136 89.0039 25.048V21.336C88.9612 22.0187 88.4919 22.52 87.5959 22.84C86.7212 23.16 85.6119 23.32 84.2679 23.32C82.6679 23.32 81.4199 23.1707 80.5239 22.872C79.6492 22.5733 79.0199 22.0827 78.6359 21.4C78.2732 20.7173 78.0919 19.7893 78.0919 18.616V12.312C78.0919 10.4773 78.5825 9.16533 79.5639 8.376C80.5665 7.58667 82.1985 7.192 84.4599 7.192C87.1479 7.192 88.7265 7.8 89.1959 9.016V7.512H91.8839V24.472C91.8839 25.9013 91.6172 27.0213 91.0839 27.832C90.5505 28.6427 89.7505 29.208 88.6839 29.528C87.6172 29.8693 86.2305 30.04 84.5239 30.04ZM84.8759 21.4C86.3905 21.4 87.4572 21.2187 88.0759 20.856C88.6945 20.4933 89.0039 19.8107 89.0039 18.808V11.8C89.0039 11.096 88.8865 10.5627 88.6519 10.2C88.4385 9.83733 88.0332 9.58133 87.4359 9.432C86.8385 9.26133 85.9639 9.176 84.8119 9.176C83.7239 9.176 82.9025 9.25067 82.3479 9.4C81.8145 9.54933 81.4412 9.816 81.2279 10.2C81.0359 10.5627 80.9399 11.096 80.9399 11.8V18.808C80.9399 19.5333 81.0465 20.0773 81.2599 20.44C81.4732 20.8027 81.8572 21.0587 82.4119 21.208C82.9665 21.336 83.7879 21.4 84.8759 21.4ZM103.383 23.32C102.06 23.32 101.025 23.1813 100.279 22.904C99.532 22.6053 98.988 22.1147 98.6466 21.432C98.3266 20.728 98.1666 19.7467 98.1666 18.488V9.4H94.7106V7.512H98.1666V2.712H101.079V7.512H106.615V9.4H101.079V18.648C101.079 19.416 101.164 19.992 101.335 20.376C101.527 20.76 101.847 21.0373 102.295 21.208C102.764 21.3573 103.436 21.432 104.311 21.432C104.588 21.432 105.356 21.3467 106.615 21.176V23.064C105.527 23.2347 104.449 23.32 103.383 23.32ZM109.762 0.599998H112.642V9.4C112.94 7.928 114.636 7.192 117.73 7.192C119.714 7.192 121.1 7.55467 121.89 8.28C122.7 8.984 123.106 10.104 123.106 11.64V23H120.226V11.832C120.226 11.4267 120.194 11.096 120.13 10.84C120.066 10.584 119.938 10.328 119.746 10.072C119.319 9.53867 118.37 9.272 116.898 9.272C115.724 9.272 114.828 9.35733 114.21 9.528C113.612 9.67733 113.196 9.93333 112.962 10.296C112.748 10.6587 112.642 11.1707 112.642 11.832V23H109.762V0.599998Z"/>'
    }
    getLength() {
        return 704.7334594726562
    }
}

mojs.addShape('motivation', StringMotivation);
mojs.addShape('strength', StringStrength);
mojs.addShape('freetime', StringFreeTime);

const loadBarTop = () => {
    return new mojs.Shape({
        parent: '.root-animation',
        className: 'loadBarTop',
        shape: 'rect',
        fill: 'none',
        stroke: 'white',
        isShowStart: false,
        strokeWidth: 3,
        radiusX: 153,
        radiusY: 30,
        x: 50,
        y: -100,
        duration: 500,
        onStart(isForward, isYoyo) {
            document.querySelector('.loadBarTop svg').setAttribute('viewBox', '309 0 309 63');
        },
        onUpdate(ep, p, isForward, isYoyo) {
            let viewbox = document.querySelector('.loadBarTop svg').getAttribute('viewBox').split(' ');
            viewbox[0] = '' + (309 - (309 * ep));
            document.querySelector('.loadBarTop svg').setAttribute('viewBox', viewbox.join(' '));
        },
        onComplete(isForward, isYoyo) {
            loadStepTop().play()
        },
    });
}

const loadBarMiddle = () => {
    return new mojs.Shape({
        parent: '.root-animation',
        className: 'loadBarMiddle',
        shape: 'rect',
        fill: 'none',
        stroke: 'white',
        isShowStart: false,
        strokeWidth: 3,
        radiusX: 153,
        radiusY: 30,
        x: 50,
        y: 0,
        duration: 500,
        onStart(isForward, isYoyo) {
            document.querySelector('.loadBarMiddle svg').setAttribute('viewBox', '309 0 309 63');
        },
        onUpdate(ep, p, isForward, isYoyo) {
            let viewbox = document.querySelector('.loadBarMiddle svg').getAttribute('viewBox').split(' ');
            viewbox[0] = '' + (309 - (309 * ep));
            document.querySelector('.loadBarMiddle svg').setAttribute('viewBox', viewbox.join(' '));
        },
        onComplete(isForward, isYoyo) {
            loadStepMiddle().play()
        },
    });
}

const loadBarBottom = () => {
    return new mojs.Shape({
        parent: '.root-animation',
        className: 'loadBarBottom',
        shape: 'rect',
        fill: 'none',
        stroke: 'white',
        isShowStart: false,
        strokeWidth: 3,
        radiusX: 153,
        radiusY: 30,
        x: 50,
        y: 100,
        duration: 500,
        onStart(isForward, isYoyo) {
            document.querySelector('.loadBarBottom svg').setAttribute('viewBox', '309 0 309 63');
        },
        onUpdate(ep, p, isForward, isYoyo) {
            let viewbox = document.querySelector('.loadBarBottom svg').getAttribute('viewBox').split(' ');
            viewbox[0] = '' + (309 - (309 * ep));
            document.querySelector('.loadBarBottom svg').setAttribute('viewBox', viewbox.join(' '));
        },
        onComplete(isForward, isYoyo) {
            loadStepBottom().play()
        },
    });
}

const loadStepTop = () => {
    const STAGGER = mojs.stagger(mojs.Shape);
    return new STAGGER({
        parent: '.loadBarTop',
        quantifier: 10,
        shape: 'rect',
        points: 3,
        fill: 'white',
        stroke: 'white',
        isShowStart: false,
        strokeWidth: 0,
        scaleX: 0.25,
        scaleY: 0.5,
        duration: 500,
        delay: 'stagger(200)',
        left: 'stagger(20, 30)'
    });
}

const loadStepMiddle = () => {
    const STAGGER = mojs.stagger(mojs.Shape);
    return new STAGGER({
        parent: '.loadBarMiddle',
        quantifier: 10,
        shape: 'rect',
        points: 3,
        fill: 'white',
        stroke: 'white',
        isShowStart: false,
        strokeWidth: 0,
        scaleX: 0.25,
        scaleY: 0.5,
        duration: 500,
        delay: 'stagger(200)',
        left: 'stagger(20, 30)'
    });
}

const loadStepBottom = () => {
    const STAGGER = mojs.stagger(mojs.Shape);
    return new STAGGER({
        parent: '.loadBarBottom',
        quantifier: 10,
        shape: 'rect',
        points: 3,
        fill: 'white',
        isShowStart: false,
        strokeWidth: 0,
        scaleX: 0.25,
        scaleY: 0.5,
        duration: 500,
        delay: 'stagger(200)',
        left: 'stagger(20, 30)'
    });
}

const generateStringFreetime = () => {
    return new mojs.Shape({
        parent: '.root-animation',
        shape: 'freetime',
        className: 'freetime',
        isShowStart: false,
        fill: 'white',
        x: -435,
        y: -75,
        scale:0.8,
        duration: 1000,
        onStart(isForward, isYoyo) {
            let arr = document.querySelector('.freetime').getAttribute('style').split(';');
            arr[arr.findIndex(e => e.includes('width'))] = '100%';
            arr[arr.findIndex(e => e.includes('height'))] = '100%';
            document.querySelector('.freetime').setAttribute('style', arr.join(';'))
            document.querySelector('.freetime svg').setAttribute('viewBox', '134 0 134 23');
        },
        onUpdate(ep, p, isForward, isYoyo) {
            let viewbox = document.querySelector('.freetime svg').getAttribute('viewBox').split(' ');
            viewbox[0] = '' + (134 - (134 * ep));
            document.querySelector('.freetime svg').setAttribute('viewBox', viewbox.join(' '));
        },
        onComplete(isForward, isYoyo) {
            splitLineTop().play();
        },
    }).then(
        {
            delay:1000,
            // scale:0
        }
    )
}

const generateStringMotivation = () => {
    return new mojs.Shape({
        parent: '.root-animation',
        shape: 'motivation',
        className: 'motivation',
        isShowStart: false,
        fill: 'white',
        x: -420,
        y: 25,
        scale:0.9,
        delay:500,
        duration: 1000,
        onStart(isForward, isYoyo) {
            let arr = document.querySelector('.motivation').getAttribute('style').split(';');
            arr[arr.findIndex(e => e.includes('width'))] = '100%';
            arr[arr.findIndex(e => e.includes('height'))] = '100%';
            document.querySelector('.motivation').setAttribute('style', arr.join(';'))
            document.querySelector('.motivation svg').setAttribute('viewBox', '152 0 152 23');
        },
        onUpdate(ep, p, isForward, isYoyo) {
            let viewbox = document.querySelector('.motivation svg').getAttribute('viewBox').split(' ');
            viewbox[0] = '' + (152 - (152 * ep));
            document.querySelector('.motivation svg').setAttribute('viewBox', viewbox.join(' '));
        },
        onComplete(isForward, isYoyo) {
            splitLineMiddle().play();
        },
    });
}

const generateStringStrength = () => {
    return new mojs.Shape({
        parent: '.root-animation',
        shape: 'strength',
        className: 'strength',
        isShowStart: false,
        fill: 'white',
        x: -450,
        y: 115,
        scale:0.7,
        delay:1000,
        duration: 1000,
        onStart(isForward, isYoyo) {
            let arr = document.querySelector('.strength').getAttribute('style').split(';');
            arr[arr.findIndex(e => e.includes('width'))] = '100%';
            arr[arr.findIndex(e => e.includes('height'))] = '100%';
            document.querySelector('.strength').setAttribute('style', arr.join(';'))
            document.querySelector('.strength svg').setAttribute('viewBox', '124 0 124 31');
        },
        onUpdate(ep, p, isForward, isYoyo) {
            let viewbox = document.querySelector('.strength svg').getAttribute('viewBox').split(' ');
            viewbox[0] = '' + (124 - (124 * ep));
            document.querySelector('.strength svg').setAttribute('viewBox', viewbox.join(' '));
        },
        onComplete(isForward, isYoyo) {
            splitLineBottom().play()
        },
    });
}

const splitLineTop = () => {
    return new mojs.Shape({
        parent: '.root-animation',
        shape: 'line',
        isShowStart: false,
        stroke: 'white',
        angle: 90,
        scaleX: 0.8,
        scaleY: 1,
        x: -150,
        y: -100,
        onComplete(isForward, isYoyo) {
            loadBarTop().play()
        },
    });
}

const splitLineMiddle = () => {
    return new mojs.Shape({
        parent: '.root-animation',
        shape: 'line',
        isShowStart: false,
        stroke: 'white',
        angle: 90,
        scaleX: 0.8,
        scaleY: 1,
        x: -150,
        y: 0,
        onComplete(isForward, isYoyo) {
            loadBarMiddle().play()
        },
    });
}

const splitLineBottom = () => {
    return new mojs.Shape({
        parent: '.root-animation',
        shape: 'line',
        isShowStart: false,
        stroke: 'white',
        angle: 90,
        scaleX: 0.8,
        scaleY: 1,
        x: -150,
        y: 100,
        onComplete(isForward, isYoyo) {
            loadBarBottom().play()
        },
    });
}

export const startAnimation = () => {
    generateStringFreetime().play();
    generateStringMotivation().play();
    generateStringStrength().play();
}